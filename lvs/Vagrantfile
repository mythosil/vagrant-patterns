# vi: ft=ruby

$provision_master = <<-SCRIPT
yum -y install keepalived ipvsadm tcpdump
cat << EOF > /etc/keepalived/keepalived.conf
vrrp_instance V1 {
    state BACKUP
    interface eth1
    virtual_router_id 3
    priority 255
    advert_int 5
    virtual_ipaddress {
        192.168.30.101 dev eth1
        192.168.31.101 dev eth2
    }
}
virtual_server 192.168.30.101 80 {
    delay_loop 5
    lvs_sched rr
    lvs_method NAT
    protocol TCP
    real_server 192.168.31.4 80 {
        weight 1
        inhibit_on_failure
        HTTP_GET {
            url {
                path /
                status_code 200
            }
        }
        connect_timeout 5
        nb_get_retry 3
        delay_before_retry 3
    }
    real_server 192.168.31.5 80 {
        weight 1
        inhibit_on_failure
        HTTP_GET {
            url {
                path /
                status_code 200
            }
        }
        connect_timeout 5
        nb_get_retry 3
        delay_before_retry 3
    }
}
EOF
systemctl enable keepalived
systemctl start keepalived
sysctl -w net.ipv4.ip_forward=1
SCRIPT

$provision_backup = $provision_master.sub(/priority 255/, 'priority 100')

$provision_web = <<-SCRIPT
yum -y install httpd tcpdump
cat << EOF > /var/www/html/index.html
<h1>Hello World</h1>
EOF
systemctl enable httpd
systemctl start httpd
ip route add default via 192.168.31.101 dev eth1
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "centos/7"
  config.vm.define "lvs-master" do |c|
    c.vm.hostname = "lvs-master"
    c.vm.provision "shell", inline: $provision_master
    c.vm.network "private_network", ip: "192.168.30.2"
    c.vm.network "private_network", ip: "192.168.31.2", virtualbox__intnet: true
  end
  config.vm.define "lvs-backup" do |c|
    c.vm.hostname = "lvs-backup"
    c.vm.provision "shell", inline: $provision_backup
    c.vm.network "private_network", ip: "192.168.30.3"
    c.vm.network "private_network", ip: "192.168.31.3", virtualbox__intnet: true
  end
  config.vm.define "web1" do |c|
    c.vm.hostname = "web1"
    c.vm.provision "shell", inline: $provision_web
    c.vm.network "private_network", ip: "192.168.31.4", virtualbox__intnet: true
  end
  config.vm.define "web2" do |c|
    c.vm.hostname = "web2"
    c.vm.provision "shell", inline: $provision_web
    c.vm.network "private_network", ip: "192.168.31.5", virtualbox__intnet: true
  end
end
